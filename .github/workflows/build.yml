name: CI/CD

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Format code
        run: dart format .
        
      - name: Commit formatting changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git diff --quiet && git diff --staged --quiet || git commit -m "Apply automatic formatting"
          git push origin HEAD:${{ github.ref }} || true

  analyze:
    needs: format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Analyze project source
        run: flutter analyze

      - name: Run tests
        run: flutter test

  build:
    needs: analyze
    runs-on: ubuntu-latest
    if: success() && (github.event_name == 'push' || github.event_name == 'pull_request')

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build libgtk-3-dev libblkid-dev liblzma-dev libsecret-1-dev libjsoncpp-dev

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        cache: true

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.pub-cache
          ~/.cache/flutter
        key: ${{ runner.os }}-pub-cache-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-cache-

    - name: Install dependencies
      run: flutter pub get
      
    - name: Build Linux
      run: flutter build linux --release

    - name: Setup AppDir
      run: |
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        cp -r build/linux/x64/release/bundle/* AppDir/usr/bin/
        cp AppDir/usr/share/applications/xenia-launcher.desktop AppDir/xenia-launcher.desktop
        cp AppDir/xenia-launcher.svg AppDir/.DirIcon
        chmod +x AppDir/AppRun

    - name: Download appimagetool
      run: |
        wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage

    - name: Build AppImage
      run: |
        ARCH=x86_64 ./appimagetool-x86_64.AppImage AppDir/
        
    - name: Upload AppImage
      uses: actions/upload-artifact@v3
      with:
        name: Xenia_Launcher-x86_64.AppImage
        path: Xenia_Launcher-x86_64.AppImage

    - name: Get version
      if: startsWith(github.ref, 'refs/tags/')
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          Xenia_Launcher-x86_64.AppImage
          README.md
        body: |
          Release ${{ steps.get_version.outputs.VERSION }}
          
          Changes in this release:
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: [analyze, build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check build status
        if: ${{ needs.build.result != 'success' || needs.analyze.result != 'success' }}
        run: exit 1
